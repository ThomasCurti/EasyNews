// <auto-generated />
using System;
using Backend.DataAccess.EFModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(earlynews_testContext))]
    [Migration("20200326151637_AddLog")]
    partial class AddLog
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.DataAccess.EFModels.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("FullArticle")
                        .HasColumnName("full_article")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("SourceId")
                        .HasColumnName("source_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("char(32)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("SourceId")
                        .HasName("source_id");

                    b.ToTable("article");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.ArticleSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("char(16)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.ToTable("article_source");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.DubiousArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("FullArticleOther")
                        .HasColumnName("full_article_other")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("FullArticleSource")
                        .HasColumnName("full_article_source")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<int?>("OtherSourceId")
                        .HasColumnName("other_source_id")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("SeenTwice")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("seen_twice")
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("SourceId")
                        .HasColumnName("source_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasColumnType("char(32)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("OtherSourceId")
                        .HasName("other_source_id");

                    b.HasIndex("SourceId")
                        .HasName("source_id");

                    b.ToTable("dubious_article");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ArticleId")
                        .HasColumnName("article_id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("Published")
                        .HasColumnName("published")
                        .HasColumnType("date");

                    b.Property<int?>("TypeId")
                        .HasColumnName("type_id")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .HasName("article_id");

                    b.HasIndex("TypeId")
                        .HasName("type_id");

                    b.ToTable("event");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("char(32)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.ToTable("event_type");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnName("class")
                        .HasColumnType("char(128)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Message")
                        .HasColumnName("message")
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnName("type")
                        .HasColumnType("char(32)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.Article", b =>
                {
                    b.HasOne("Backend.DataAccess.EFModels.ArticleSource", "Source")
                        .WithMany("Article")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("article_ibfk_1");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.DubiousArticle", b =>
                {
                    b.HasOne("Backend.DataAccess.EFModels.ArticleSource", "OtherSource")
                        .WithMany("DubiousArticleOtherSource")
                        .HasForeignKey("OtherSourceId")
                        .HasConstraintName("dubious_article_ibfk_2");

                    b.HasOne("Backend.DataAccess.EFModels.ArticleSource", "Source")
                        .WithMany("DubiousArticleSource")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("dubious_article_ibfk_1");
                });

            modelBuilder.Entity("Backend.DataAccess.EFModels.Event", b =>
                {
                    b.HasOne("Backend.DataAccess.EFModels.Article", "Article")
                        .WithMany("Event")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("event_ibfk_2");

                    b.HasOne("Backend.DataAccess.EFModels.EventType", "Type")
                        .WithMany("Event")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("event_ibfk_1");
                });
#pragma warning restore 612, 618
        }
    }
}
